---
export interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description">
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<title>{title}</title>
		<meta name="twitter:card" content="summary_large_image" />
		<meta name="twitter:site" content="@YoussefAyachi95" />
		<meta name="view-transition" content="same-origin" />
	</head>
	<body>
		<div id="content">
			<slot />
		</div>
	</body>
</html>
<style is:global>
	:root {
		--accent: 124, 58, 237;
		--accent-gradient: linear-gradient(45deg, rgb(var(--accent)), #da62c4 30%, white 60%);
	}
	html {
		font-family: system-ui, sans-serif;
		background-color: #F6F6F6;
	}
	code {
		font-family: Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono,
			Bitstream Vera Sans Mono, Courier New, monospace;
	}
</style>

<script>
	window.navigation.addEventListener('navigate', (event) => {
		// console.log(event.destination.url)

		const toUrl = new URL(event.destination.url)

		// if destination is a different url, ignore
		if (location.origin !== toUrl.origin) return

		// else intercept and fetch the destination route
		event.intercept({
			async handler () {
				// get html and read it as text
				const response = await fetch(toUrl.pathname)
				const text = await response.text()

				// get only the body from html
				const [, data] = text.match(/<body>([\s\S]*)<\/body>/i)
				// console.log(data)

				document.startViewTransition(() => {
					document.body.innerHTML = data
					document.documentElement.scrollTop = 0
				})
			}
		})
	})
</script>
